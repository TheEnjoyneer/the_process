{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class PopViewService {\n  constructor() {\n    this.modals = [];\n  }\n  add(modal) {\n    // ensure component has a unique id attribute\n    /* if (!modal.id || this.modals.find(x => x.id === modal.id)) {\r\n         throw new Error('modal must have a unique id attribute');\r\n     }*/\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n  remove(modal) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x === modal);\n  }\n  open(id) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    if (!modal) {\n      throw new Error(`modal '${id}' not found`);\n    }\n    modal.open();\n  }\n  close() {\n    // close the modal that is currently open\n    const modal = this.modals.find(x => x.isOpen);\n    modal?.close();\n  }\n}\n_class = PopViewService;\n_class.ɵfac = function PopViewService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["PopViewService","constructor","modals","add","modal","push","remove","filter","x","open","id","find","Error","close","isOpen","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Christopher Brant\\CFB_BCRI\\the_process\\BCRI_V2\\angularApp\\src\\app\\_services\\pop-view.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { PopViewComponent } from '../pop-view/pop-view.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PopViewService {\r\n    private modals: PopViewComponent[] = [];\r\n\r\n    add(modal: PopViewComponent) {\r\n        // ensure component has a unique id attribute\r\n       /* if (!modal.id || this.modals.find(x => x.id === modal.id)) {\r\n            throw new Error('modal must have a unique id attribute');\r\n        }*/\r\n\r\n        // add modal to array of active modals\r\n        this.modals.push(modal);\r\n    }\r\n\r\n    remove(modal: PopViewComponent) {\r\n        // remove modal from array of active modals\r\n        this.modals = this.modals.filter(x => x === modal);\r\n    }\r\n\r\n    open(id: string) {\r\n        // open modal specified by id\r\n        const modal = this.modals.find(x => x.id === id);\r\n\r\n        if (!modal) {\r\n            throw new Error(`modal '${id}' not found`);\r\n        }\r\n\r\n        modal.open();\r\n    }\r\n\r\n    close() {\r\n        // close the modal that is currently open\r\n        const modal = this.modals.find(x => x.isOpen);\r\n        modal?.close();\r\n    }\r\n}"],"mappings":";;AAIA,OAAM,MAAOA,cAAc;EAD3BC,YAAA;IAEY,KAAAC,MAAM,GAAuB,EAAE;;EAEvCC,GAAGA,CAACC,KAAuB;IACvB;IACD;;;IAIC;IACA,IAAI,CAACF,MAAM,CAACG,IAAI,CAACD,KAAK,CAAC;EAC3B;EAEAE,MAAMA,CAACF,KAAuB;IAC1B;IACA,IAAI,CAACF,MAAM,GAAG,IAAI,CAACA,MAAM,CAACK,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAAC;EACtD;EAEAK,IAAIA,CAACC,EAAU;IACX;IACA,MAAMN,KAAK,GAAG,IAAI,CAACF,MAAM,CAACS,IAAI,CAACH,CAAC,IAAIA,CAAC,CAACE,EAAE,KAAKA,EAAE,CAAC;IAEhD,IAAI,CAACN,KAAK,EAAE;MACR,MAAM,IAAIQ,KAAK,CAAC,UAAUF,EAAE,aAAa,CAAC;;IAG9CN,KAAK,CAACK,IAAI,EAAE;EAChB;EAEAI,KAAKA,CAAA;IACD;IACA,MAAMT,KAAK,GAAG,IAAI,CAACF,MAAM,CAACS,IAAI,CAACH,CAAC,IAAIA,CAAC,CAACM,MAAM,CAAC;IAC7CV,KAAK,EAAES,KAAK,EAAE;EAClB;;SAjCSb,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAe,OAAA,EAAdf,MAAc,CAAAgB,IAAA;EAAAC,UAAA,EADD;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}