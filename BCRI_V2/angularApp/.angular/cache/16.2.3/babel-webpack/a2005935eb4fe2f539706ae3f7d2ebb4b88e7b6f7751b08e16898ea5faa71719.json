{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class PopViewService {\n  constructor() {\n    this.modals = [];\n  }\n  add(modal) {\n    // ensure component has a unique id attribute\n    /* if (!modal.id || this.modals.find(x => x.id === modal.id)) {\r\n         throw new Error('modal must have a unique id attribute');\r\n     }\r\n        // add modal to array of active modals\r\n     this.modals.push(modal);\r\n    }\r\n    remove(modal: PopViewComponent) {\r\n     // remove modal from array of active modals\r\n     this.modals = this.modals.filter(x => x === modal);\r\n    }\r\n    open(id: string) {\r\n     // open modal specified by id\r\n     const modal = this.modals.find(x => x.id === id);\r\n        if (!modal) {\r\n         throw new Error(`modal '${id}' not found`);\r\n     }\r\n        modal.open();\r\n    }\r\n    close() {\r\n     // close the modal that is currently open\r\n     const modal = this.modals.find(x => x.isOpen);\r\n     modal?.close();\r\n    }\r\n    } \r\n    }\r\n    static { this.ɵfac = function PopViewService_Factory(t) { return new (t || PopViewService)(); }; }\r\n    static { this.ɵprov = /*@__PURE__*/\n    i0.ɵɵdefineInjectable({\n      token: PopViewService,\n      factory: PopViewService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["PopViewService","constructor","modals","add","modal","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Christopher Brant\\CFB_BCRI\\the_process\\BCRI_V2\\angularApp\\src\\app\\_services\\pop-view.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { PopViewComponent } from '../pop-view/pop-view.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PopViewService {\r\n    private modals: PopViewComponent[] = [];\r\n\r\n    add(modal: PopViewComponent) {\r\n        // ensure component has a unique id attribute\r\n       /* if (!modal.id || this.modals.find(x => x.id === modal.id)) {\r\n            throw new Error('modal must have a unique id attribute');\r\n        }\r\n\r\n        // add modal to array of active modals\r\n        this.modals.push(modal);\r\n    }\r\n\r\n    remove(modal: PopViewComponent) {\r\n        // remove modal from array of active modals\r\n        this.modals = this.modals.filter(x => x === modal);\r\n    }\r\n\r\n    open(id: string) {\r\n        // open modal specified by id\r\n        const modal = this.modals.find(x => x.id === id);\r\n\r\n        if (!modal) {\r\n            throw new Error(`modal '${id}' not found`);\r\n        }\r\n\r\n        modal.open();\r\n    }\r\n\r\n    close() {\r\n        // close the modal that is currently open\r\n        const modal = this.modals.find(x => x.isOpen);\r\n        modal?.close();\r\n    }\r\n}"],"mappings":";AAIA,OAAM,MAAOA,cAAc;EAD3BC,YAAA;IAEY,KAAAC,MAAM,GAAuB,EAAE;;EAEvCC,GAAGA,CAACC,KAAuB;IACvB;IACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;aALMJ,cAAc;MAAAK,OAAA,EAAdL,cAAc,CAAAM,IAAA;MAAAC,UAAA,EADD;IAAM;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}