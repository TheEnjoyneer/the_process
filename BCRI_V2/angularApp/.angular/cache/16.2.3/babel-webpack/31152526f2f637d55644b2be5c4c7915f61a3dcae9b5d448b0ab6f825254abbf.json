{"ast":null,"code":"var _class;\nimport { NgFor } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatchupCardComponent } from '../matchup-card/matchup-card.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/grid-list\";\nfunction CardGridComponent_mat_grid_tile_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 2);\n    i0.ɵɵelement(1, \"app-matchup-card\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tile_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"background\", tile_r1.color);\n    i0.ɵɵproperty(\"colspan\", tile_r1.cols)(\"rowspan\", tile_r1.rows);\n  }\n}\nexport class CardGridComponent {\n  constructor(http) {\n    this.http = http;\n    this.numGames = 6;\n  }\n  ngOnInit() {\n    this.getData();\n  }\n}\n_class = CardGridComponent;\n_class.ɵfac = function CardGridComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-card-grid\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"rowHeight\", \"1:1\", 3, \"cols\"], [3, \"colspan\", \"rowspan\", \"background\", 4, \"ngFor\", \"ngForOf\"], [3, \"colspan\", \"rowspan\"]],\n  template: function CardGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-grid-list\", 0);\n      i0.ɵɵtemplate(1, CardGridComponent_mat_grid_tile_1_Template, 2, 4, \"mat-grid-tile\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵpropertyInterpolate(\"cols\", ctx.numGames);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tiles);\n    }\n  },\n  dependencies: [HttpClientModule, MatchupCardComponent, MatGridListModule, i2.MatGridList, i2.MatGridTile, NgFor],\n  styles: [\"mat-grid-tile[_ngcontent-%COMP%] {\\n    background: lightblue;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2FyZC1ncmlkL2NhcmQtZ3JpZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kscUJBQXFCO0VBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWdyaWQtdGlsZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiBsaWdodGJsdWU7XHJcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\n{\n  text: 'One', cols;\n  3, rows;\n  1, color;\n  'lightblue';\n}\n{\n  text: 'Two', cols;\n  1, rows;\n  2, color;\n  'lightgreen';\n}\n{\n  text: 'Three', cols;\n  1, rows;\n  1, color;\n  'lightpink';\n}\n{\n  text: 'Four', cols;\n  2, rows;\n  1, color;\n  '#DDBDF1';\n}\n;\ngetData();\n{\n  // this.http.get('http://127.0.0.1:5000/topGame').map(response => response.json()).subscribe(data => this.newdata = data);\n  this.http.get('http://127.0.0.1:5000/gameCard').subscribe(data => {\n    console.log(data);\n    this.newdata = data; //JSON.stringify(data);\n  });\n}","map":{"version":3,"names":["NgFor","HttpClientModule","MatGridListModule","MatchupCardComponent","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵstyleProp","tile_r1","color","ɵɵproperty","cols","rows","CardGridComponent","constructor","http","numGames","ngOnInit","getData","ɵɵdirectiveInject","i1","HttpClient","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","CardGridComponent_Template","rf","ctx","ɵɵtemplate","CardGridComponent_mat_grid_tile_1_Template","ɵɵpropertyInterpolate","ɵɵadvance","tiles","i2","MatGridList","MatGridTile","styles","text","get","subscribe","data","console","log","newdata"],"sources":["C:\\Users\\Christopher Brant\\CFB_BCRI\\the_process\\BCRI_V2\\angularApp\\src\\app\\card-grid\\card-grid.component.ts","C:\\Users\\Christopher Brant\\CFB_BCRI\\the_process\\BCRI_V2\\angularApp\\src\\app\\card-grid\\card-grid.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { NgFor } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatchupCardComponent } from '../matchup-card/matchup-card.component'\n\n@Component({\n  selector: 'app-card-grid',\n  standalone: true,\n  imports: [ \n    HttpClientModule,\n    MatchupCardComponent,\n    MatGridListModule, \n    NgFor\n  ],\n  templateUrl: './card-grid.component.html',\n  styleUrls: ['./card-grid.component.css']\n})\nexport class CardGridComponent {\n  newdata:any;\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n\tthis.getData();\n  }\n  numGames = 6;\n  til\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\n  ];\n\n  getData() {\n    // this.http.get('http://127.0.0.1:5000/topGame').map(response => response.json()).subscribe(data => this.newdata = data);\n     this.http.get('http://127.0.0.1:5000/gameCard').subscribe(data => {\n       console.log(data)\n       this.newdata = data;//JSON.stringify(data);\n       });\n   }\n}\n","<mat-grid-list cols={{numGames}} rowHeight=1:1>\n    <mat-grid-tile\n        *ngFor=\"let tile of tiles\"\n        [colspan]=\"tile.cols\"\n        [rowspan]=\"tile.rows\"\n        [style.background]=\"tile.color\">\n        <!---<app-matchup-card></app-matchup-card>--->\n        <app-matchup-card></app-matchup-card>\n    </mat-grid-tile>\n</mat-grid-list>\n\n<!---\n<mat-grid-list cols=\"1\" rowHeight=\"4:1\">\n    <mat-grid-tile><app-matchup-card></app-matchup-card></mat-grid-tile>\n    <mat-grid-tile>2</mat-grid-tile>\n    <mat-grid-tile>3</mat-grid-tile>\n    <mat-grid-tile>4</mat-grid-tile>\n</mat-grid-list>\n--->"],"mappings":";AAEA,SAASA,KAAK,QAAQ,iBAAiB;AACvC,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,oBAAoB,QAAQ,wCAAwC;;;;;;ICJzEC,EAAA,CAAAC,cAAA,uBAIoC;IAEhCD,EAAA,CAAAE,SAAA,uBAAqC;IACzCF,EAAA,CAAAG,YAAA,EAAgB;;;;IAHZH,EAAA,CAAAI,WAAA,eAAAC,OAAA,CAAAC,KAAA,CAA+B;IAF/BN,EAAA,CAAAO,UAAA,YAAAF,OAAA,CAAAG,IAAA,CAAqB,YAAAH,OAAA,CAAAI,IAAA;;;ADgB7B,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAKxB,KAAAC,QAAQ,GAAG,CAAC;EAL4B;EAExCC,QAAQA,CAAA;IACT,IAAI,CAACC,OAAO,EAAE;EACb;;SANWL,iBAAiB;;mBAAjBA,MAAiB,EAAAV,EAAA,CAAAgB,iBAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;QAAjBR,MAAiB;EAAAS,SAAA;EAAAC,UAAA;EAAAC,QAAA,GAAArB,EAAA,CAAAsB,mBAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCnB9B5B,EAAA,CAAAC,cAAA,uBAA+C;MAC3CD,EAAA,CAAA8B,UAAA,IAAAC,0CAAA,2BAOgB;MACpB/B,EAAA,CAAAG,YAAA,EAAgB;;;MATDH,EAAA,CAAAgC,qBAAA,SAAAH,GAAA,CAAAhB,QAAA,CAAiB;MAEPb,EAAA,CAAAiC,SAAA,GAAQ;MAARjC,EAAA,CAAAO,UAAA,YAAAsB,GAAA,CAAAK,KAAA,CAAQ;;;iBDS7BrC,gBAAgB,EAChBE,oBAAoB,EACpBD,iBAAiB,EAAAqC,EAAA,CAAAC,WAAA,EAAAD,EAAA,CAAAE,WAAA,EACjBzC,KAAK;EAAA0C,MAAA;AAAA;AAcL;EAACC,IAAI,EAAE,KAAK,EAAE/B,IAAI;EAAE,CAAC,EAAEC,IAAI;EAAE,CAAC,EAAEH,KAAK;EAAE,WAAW;;AAClD;EAACiC,IAAI,EAAE,KAAK,EAAE/B,IAAI;EAAE,CAAC,EAAEC,IAAI;EAAE,CAAC,EAAEH,KAAK;EAAE,YAAY;;AACnD;EAACiC,IAAI,EAAE,OAAO,EAAE/B,IAAI;EAAE,CAAC,EAAEC,IAAI;EAAE,CAAC,EAAEH,KAAK;EAAE,WAAW;;AACpD;EAACiC,IAAI,EAAE,MAAM,EAAE/B,IAAI;EAAE,CAAC,EAAEC,IAAI;EAAE,CAAC,EAAEH,KAAK;EAAE,SAAS;;AAClD;AAEDS,OAAO,EAAE;AAAC;EACR;EACC,IAAI,CAACH,IAAI,CAAC4B,GAAG,CAAC,gCAAgC,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;IAC/DC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,IAAI,CAACG,OAAO,GAAGH,IAAI,CAAC;EACpB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}